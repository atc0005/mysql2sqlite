# Copyright 2022 Adam Chalkley
#
# https://github.com/atc0005/mysql2sqlite
#
# Licensed under the MIT License. See LICENSE file in the project root for
# full license information.

name: Build using Makefile container recipes

# Run container-based builds as directed by calling workflow(s).
on:
  workflow_call:

jobs:
  # This is run from *within* a container that is itself within the GitHub
  # Actions environment. All of these commands are run within our container.
  build_dynamic_binaries_using_mingw_image:
    name: Build dynamically linked binaries using mingw-w64 image
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 20
    container:
      # Use image which supports cross-platform, static cgo-enabled builds for
      # Windows and Linux.
      image: "ghcr.io/atc0005/go-ci:go-ci-stable-cgo-mingw-w64-build"

    steps:
      - name: Print go version
        run: go version

      - name: Check out code (full history)
        uses: actions/checkout@v4
        with:
          # Full history is needed to allow listing tags via build tooling
          # (e.g., go-winres, git-describe-semver)
          fetch-depth: 0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Build using project Makefile
        run: make all

  # This is run from *within* a container that is itself within the GitHub
  # Actions environment. All of these commands are run within our container.
  build_static_binaries_using_mingw_image:
    name: Build statically linked binaries using mingw-w64 image
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 20
    container:
      # Use image which supports cross-platform, static cgo-enabled builds for
      # Windows and Linux.
      image: "ghcr.io/atc0005/go-ci:go-ci-stable-cgo-mingw-w64-build"

    steps:
      - name: Print go version
        run: go version

      - name: Check out code (full history)
        uses: actions/checkout@v4
        with:
          # Full history is needed to allow listing tags via build tooling
          # (e.g., go-winres, git-describe-semver)
          fetch-depth: 0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Build using project Makefile
        run: make all-static

  # This is run directly within the GitHub Actions environment and calls the
  # `docker` command to perform specific build tasks within Docker containers.
  # Prep steps are run within the GitHub Actions environment and not within
  # the containers.
  build_static_binaries_using_alpine_images:
    name: Build static binaries using Alpine images
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 20

    steps:
      # This doesn't apply here; were we to execute this, it would show us the
      # Go version provided by the GitHub Actions environment (VM) and not our
      # Docker images.
      #
      # - name: Print go version
      #   run: go version

      - name: Check out code (full history)
        uses: actions/checkout@v4
        with:
          # Full history is needed to allow listing tags via build tooling
          # (e.g., go-winres, git-describe-semver)
          fetch-depth: 0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      # bsdmainutils provides "column" which is used by the Makefile
      - name: Install Ubuntu packages
        run: |
          sudo apt-get update && \
          sudo apt-get install -y --no-install-recommends \
            bsdmainutils \
            make

      # Use podman recipe to perform release builds. The docker-release-build
      # recipe (which executes non-root user build containers) is currently
      # unsupported on GitHub hosted runners.
      #
      # From the docs:
      #
      # Actions that run in Docker containers have static directories under
      # the /github path. However, we strongly recommend using the default
      # environment variables to construct file paths in Docker containers.
      #
      # GitHub reserves the /github path prefix and creates three directories
      # for actions.
      #
      # /github/home
      #
      # /github/workspace - Note: GitHub Actions must be run by the default
      # Docker user (root). Ensure your Dockerfile does not set the USER
      # instruction, otherwise you will not be able to access
      # GITHUB_WORKSPACE.
      #
      # /github/workflow
      #
      # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#docker-container-filesystem
      - name: Build using project Makefile container recipe
        run: make podman-release-build
