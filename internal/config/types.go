// Copyright 2020 Adam Chalkley
//
// https://github.com/atc0005/mysql2sqlite
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package config

import (
	"github.com/alexflint/go-arg"
	"github.com/atc0005/mysql2sqlite/internal/dbqs"
)

type generalSettings struct {
	TrimWhitespace       *bool `yaml:"trim_leading_trailing_whitespace"`
	ConnectionRetries    *int  `yaml:"connection_retries"`
	ConnectionRetryDelay *int  `yaml:"connection_retry_delay"`
	ConnectionTimeout    *int  `yaml:"connection_timeout"`
}

type mysqlConfig struct {
	Username        *string `yaml:"username"`
	Password        *string `yaml:"password"`
	Host            *string `yaml:"host"`
	Port            *int    `yaml:"port"`
	Database        *string `yaml:"database"`
	Encryption      *string `yaml:"encryption"`
	ConnMaxLifetime *int    `yaml:"max_connection_lifetime"`
	MaxOpenConns    *int    `yaml:"max_open_connections"`
	MaxIdleConns    *int    `yaml:"max_idle_connections"`
	ConnMaxIdleTime *int    `yaml:"max_idle_connection_time"`
}

type sqliteConfig struct {
	Filename      *string `yaml:"db_filename"`
	Path          *string `yaml:"base_dir"`
	CreateIndexes *bool   `yaml:"create_indexes"`
	BusyTimeout   *int    `yaml:"busy_timeout"`
}

type loggingConfig struct {
	Level  *string `yaml:"level"`
	Output *string `yaml:"output"`
	Format *string `yaml:"format"`
	Stats  *bool   `yaml:"connection_stats"`
}

type configFileSettings struct {
	General      generalSettings `yaml:"general"`
	MySQLConfig  mysqlConfig     `yaml:"mysql_config"`
	SQLiteConfig sqliteConfig    `yaml:"sqlite_config"`
	Logging      loggingConfig   `yaml:"logging"`
	Queries      dbqs.SQLQueries `yaml:"queries"`
}

type flagSettings struct {
	// LogLevel is the chosen logging level
	LogLevel *string `arg:"--log-level,env:MYSQL2SQLITE_LOG_LEVEL" help:"Log message priority filter. Log messages with a lower level are ignored."`

	// LogFormat controls which output format is used for log messages
	// generated by this application. This value is from a smaller subset
	// of the formats supported by the third-party leveled-logging package
	// used by this application.
	LogFormat *string `arg:"--log-format,env:MYSQL2SQLITE_LOG_FORMAT" help:"Log messages are written in this format."`

	// LogOutput is one of the standard application outputs, stdout or stderr
	LogOutput *string `arg:"--log-output,env:MYSQL2SQLITE_LOG_OUTPUT" help:"Log messages are written to this output target."`

	// ConfigFile represents the fully-qualified path to a configuration file
	// consulted for settings not provided via CLI flags
	ConfigFile *string `arg:"--config-file,env:MYSQL2SQLITE_CONFIG_FILE" help:"Full path to configuration file. See config.example.yaml for a starter template."`
}

// Config is a unified set of configuration values for this application. The
// majority of values held by this object are intended to be retrieved via
// "Getter" methods.
type Config struct {
	flagSettings       flagSettings
	configFileSettings configFileSettings

	// configFileLoaded is an internal flag indicating whether a user-provided
	// config file was specified *and* loaded, or a config file was
	// automatically detected *and* loaded.
	configFileLoaded bool

	// configFileUsed is an internal field indicating *what* config file was
	// loaded, be it explicitly specified by the user or automatically
	// detected from a known location.
	configFileUsed string

	flagParser *arg.Parser `yaml:"-" arg:"-"`
}
